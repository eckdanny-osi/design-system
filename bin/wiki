#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const stream = require('stream');
const slugify = require('slugify');
const MDXC = require('mdxc');
const mkdirp = require('mkdirp');

const INPUT_DIR = '../wiki';
const OUTPUT_DIR =
  '../packages/design.cwds.io/src/modules/design-principles/wiki';
const RE_MARKDOWN = /\.md$/;

const md = new MDXC({
  commonJS: true,
  linkify: true,
  typographer: true,
});

mkdirp.sync(path.resolve(__dirname, OUTPUT_DIR));

function main() {
  fs.readdir(path.resolve(__dirname, INPUT_DIR), (err, files) => {
    files.filter(f => RE_MARKDOWN.test(f)).map(d => {
      const outFile = slugify(d)
        .replace(/\.md$/, '.js')
        .replace(/-(.)/g, d => d.slice(1).toUpperCase())
        .replace(/^\w/, l => l.toUpperCase());
      const content = fs
        .readFileSync(path.resolve(__dirname, INPUT_DIR, d))
        .toString('utf8');
      const rendered = '/* eslint-disable */\n\n' + md.render(content, {});
      fs.writeFileSync(path.resolve(__dirname, OUTPUT_DIR, outFile), rendered);
    });
  });
}

function isSection(line) {
  const match = ('' + line).match(/^#+\s(.+)/);
  return match && match.slice(1);
}

function isLink(line) {
  const match = ('' + line).match(/^\s?(\-|\*)\s?\[(.+)\]\((.+)\)$/);
  return match && [match[2], match[3].split('#')[0]];
}

function parse(cb) {
  let links = [];
  let i = 0;
  const file = path.resolve(__dirname, INPUT_DIR, '_Sidebar.md');
  const readStream = fs.createReadStream(file);
  const reader = readline.createInterface(readStream);
  reader.on('line', line => {
    let link, section;
    if ((link = isLink(line))) {
      const [title, file] = link;
      links[i - 1].children.push({ title, file });
    }
    if ((section = isSection(line))) {
      const [title] = section;
      links[i] = { title, children: [] };
      i++;
    }
  });
  reader.on('close', () => {
    cb(null, links);
  });
  reader.on('error', cb);
}

parse((err, routes) => {
  if (err) throw err;
  // const json = JSON.stringify(routes, null, 2);
  routes.reduce((acc, group) => [...acc, ...group.children], []).forEach(d => {
    const content = fs
      .readFileSync(path.resolve(__dirname, INPUT_DIR, `${d.file}.md`))
      .toString('utf8');
    const rendered = '/* eslint-disable */\n\n' + md.render(content, {});
    fs.writeFileSync(
      path.resolve(__dirname, OUTPUT_DIR, `${d.file}.js`),
      rendered,
      'utf8'
    );
  });
  // Create the `routes` file now...
  let wikiRoutesFile = '';
  const file2component = {};
  routes
    .reduce((acc, group) => [...acc, ...group.children], [])
    .forEach(route => {
      const componentName = route.file.replace(/\-/g, '');
      file2component[route.file] = componentName;
      wikiRoutesFile += `import ${componentName} from './${route.file}'\n`;
    });

  wikiRoutesFile += '\n';

  const json = routes.map(section => {
    return {
      ...section,
      slug: slugify(section.title),
      children: section.children.map(({ title, file }) => ({
        title,
        file,
        component: `%%${file2component[file]}%%`,
        slug: slugify(title),
      })),
    };
  });

  wikiRoutesFile += `export default ${JSON.stringify(json, null, 2)}`;

  wikiRoutesFile = wikiRoutesFile.replace(/(\"%%)|(%%\")/g, '');

  fs.writeFileSync(
    path.resolve(__dirname, OUTPUT_DIR, `wiki-routes.js`),
    wikiRoutesFile,
    'utf8'
  );
});
